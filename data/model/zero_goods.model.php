<?php/** * 0元淘商品管理 * * */defined('InSystem') or exit('Access Invalid!');class zero_goodsModel extends Model{    public function __construct(){        parent::__construct('zero_goods');    }    const STATE1 = 1;       // 出售中    const STATE0 = 0;       // 下架    const STATE10 = 10;     // 违规    const VERIFY1 = 1;      // 审核通过    const VERIFY0 = 0;      // 审核失败    const VERIFY10 = 10;    // 等待审核    /**     * 新增商品数据     *     * @param array $insert 数据     * @param string $table 表名     */    public function addGoods($insert) {        $result = $this->table('zero_goods')->insert($insert);        if ($result) {            $this->_dGoodsCache($result);//            $this->_dGoodsCommonCache($insert['goods_commonid']);////            $this->_dGoodsSpecCache($insert['goods_commonid']);        }        return $result;    }    /**     * 商品SKU列表     *     * @param array $condition 条件     * @param string $field 字段     * @param string $group 分组     * @param string $order 排序     * @param int $limit 限制     * @param int $page 分页     * @param boolean $lock 是否锁定     * @return array 二维数组     */    public function getGoodsList($condition, $field = '*', $group = '',$order = '', $limit = 0, $page = 0, $lock = false, $count = 0) {        return $this->table('zero_goods')->field($field)->where($condition)->group($group)->order($order)->limit($limit)->page($page, $count)->lock($lock)->select();    }    /**     * 在售商品SKU列表     *     * @param array $condition 条件     * @param string $field 字段     * @param string $group 分组     * @param string $order 排序     * @param int $limit 限制     * @param int $page 分页     * @param boolean $lock 是否锁定     * @return array     */    public function getGoodsOnlineList($condition, $field = '*', $page = 0, $order = 'goods_id desc', $limit = 0, $group = '', $lock = false, $count = 0) {        $condition['goods_state']   = self::STATE1;        $condition['goods_verify']  = self::VERIFY1;        return $this->getGoodsList($condition, $field, $group, $order, $limit, $page, $lock, $count);    }    /**     * 更新商品SUK数据     *     * @param array $update 更新数据     * @param array $condition 条件     * @return boolean     */    public function editGoods($update, $condition) {        $goods_list = $this->getGoodsList($condition, 'goods_id');        if (empty($goods_list)) {            return true;        }        $goodsid_array = array();        foreach ($goods_list as $value) {            $goodsid_array[] = $value['goods_id'];        }        return $this->editGoodsById($update, $goodsid_array);    }    /**     * 更新商品SUK数据     * @param array $update     * @param int|array $goodsid_array     * @return boolean|unknown     */    public function editGoodsById($update, $goodsid_array) {        if (empty($goodsid_array)) {            return true;        }        $condition['goods_id'] = array('in', $goodsid_array);        $update['goods_edittime'] = TIMESTAMP;        $result = $this->table('zero_goods')->where($condition)->update($update);        if ($result) {            foreach ((array)$goodsid_array as $value) {                $this->_dGoodsCache($value);            }        }        return $result;    }    /**     * 获取单条商品SKU信息     *     * @param array $condition     * @param string $field     * @return array     */    public function getGoodsInfo($condition, $field = '*') {        $info = $this->table('zero_goods')->field($field)->where($condition)->find();        if($info){//            $info['goods_detail'] = html_entity_decode($info['goods_detail']);        }        return $info;    }    /**     * 获得商品SKU某字段的和     *     * @param array $condition     * @param string $field     * @return boolean     */    public function getGoodsSum($condition, $field) {        return $this->table('zero_goods')->where($condition)->sum($field);    }    /**     * 获得商品SKU数量     *     * @param array $condition     * @param string $field     * @return int     */    public function getGoodsCount($condition) {        return $this->table('zero_goods')->where($condition)->count();    }    /**     * 获得出售中商品SKU数量     *     * @param array $condition     * @param string $field     * @return int     */    public function getGoodsOnlineCount($condition, $field = '*') {        $condition['goods_state']   = self::STATE1;        $condition['goods_verify']  = self::VERIFY1;        return $this->table('zero_goods')->where($condition)->group('')->count1($field);    }    /**     * 删除商品SKU信息     *     * @param array $condition     * @return boolean     */    public function delGoods($condition) {        $goods_list = $this->getGoodsList($condition, '*');        if (!empty($goods_list)) {            $goodsid_array = array();            // 删除商品二维码            foreach ($goods_list as $val) {                $goodsid_array[] = $val['goods_id'];                                //删除主图                if (!empty($val['goods_image_index'])){                    @unlink(BASE_UPLOAD_PATH.DS.$val['goods_image_index']);                }                //删除轮播图                if (!empty($val['goods_image_list'])){                    $lb_img_list = explode(';', $val['goods_image_list']);                    foreach ($lb_img_list as $gv) {                        @unlink(BASE_UPLOAD_PATH.DS.$gv);                    }                }                               // 删除商品缓存                $this->_dGoodsCache($val['goods_id']);                      }        }        return $this->table('zero_goods')->where($condition)->delete();    }    /**     * 发送店铺消息     * @param string $code     * @param int $store_id     * @param array $param     */    private function _sendStoreMsg($code, $store_id, $param) {        QueueClient::push('sendStoreMsg', array('code' => $code, 'store_id' => $store_id, 'param' => $param));    }    /**     * 取得商品详细信息（优先查询缓存）（在售）     * 如果未找到，则缓存所有字段     * @param int $goods_id     * @param string $field 需要取得的缓存键值, 例如：'*','goods_name,store_name'     * @return array     */    public function getGoodsOnlineInfoByID($goods_id, $field = '*') {        if ($field != '*') {            $field .= ',goods_state,goods_verify';        }        $goods_info = $this->getGoodsInfoByID($goods_id,trim($field,','));        if ($goods_info['goods_state'] != self::STATE1 || $goods_info['goods_verify'] != self::VERIFY1) {            $goods_info = array();        }        return $goods_info;    }    /**     * 取得商品详细信息（优先查询缓存）     * 如果未找到，则缓存所有字段     * @param int $goods_id     * @param string $fields 需要取得的缓存键值, 例如：'*','goods_name,store_name'     * @return array     */    public function getGoodsInfoByID($goods_id, $fields = '*') {        $goods_info = $this->_rGoodsCache($goods_id, $fields);        if (empty($goods_info)) {            $goods_info = $this->getGoodsInfo(array('goods_id'=>$goods_id));            $this->_wGoodsCache($goods_id, $goods_info);        }        return $goods_info;    }    /**     * 获得商品图片数组     * @param int $goods_id     * @param array $condition     */    public function getGoodsImageByKey($key) {        $image_list = $this->_rGoodsImageCache($key);        if (empty($image_list)) {            $array = explode('|', $key);            list($common_id, $color_id) = $array;            $image_more = $this->getGoodsImageList(array('goods_commonid' => $common_id, 'color_id' => $color_id), 'goods_image');            $image_list['image'] = serialize($image_more);            $this->_wGoodsImageCache($key, $image_list);        }        $image_more = unserialize($image_list['image']);        return $image_more;    }    /**     * 读取商品缓存     * @param int $goods_id     * @param string $fields     * @return array     */    private function _rGoodsCache($goods_id, $fields) {        return rcache($goods_id, 'goods', $fields);    }    /**     * 写入商品缓存     * @param int $goods_id     * @param array $goods_info     * @return boolean     */    private function _wGoodsCache($goods_id, $goods_info) {        return wcache($goods_id, $goods_info, 'goods');    }    /**     * 删除商品缓存     * @param int $goods_id     * @return boolean     */    private function _dGoodsCache($goods_id) {        return dcache($goods_id, 'goods');    }    /**     * 获取单条商品信息     *     * @param int $goods_id     * @return array     */    public function getGoodsDetail($goods_id) {        if($goods_id <= 0) {            return null;        }        $result1 = $this->getGoodsInfoAndPromotionById($goods_id);        if (empty($result1)) {            return null;        }        $result2 = $this->getGoodeCommonInfoByID($result1['goods_commonid']);        $goods_info = array_merge($result2, $result1);        $goods_info['spec_value'] = unserialize($goods_info['spec_value']);        $goods_info['spec_name'] = unserialize($goods_info['spec_name']);        $goods_info['goods_spec'] = unserialize($goods_info['goods_spec']);        $goods_info['goods_attr'] = unserialize($goods_info['goods_attr']);        // 手机商品描述        if ($goods_info['mobile_body'] != '') {            $mobile_body_array = unserialize($goods_info['mobile_body']);            if (is_array($mobile_body_array)) {                $mobile_body = '';                foreach ($mobile_body_array as $val) {                    switch ($val['type']) {                    	case 'text':                    	    $mobile_body .= '<div>' . $val['value'] . '</div>';                    	    break;                    	case 'image':                    	    $mobile_body .= '<img src="' . $val['value'] . '">';                    	    break;                    }                }                $goods_info['mobile_body'] = $mobile_body;            }        }        // 查询所有规格商品        $spec_array = $this->getGoodsSpecListByCommonId($goods_info['goods_commonid']);        $spec_list = array();       // 各规格商品地址，js使用        $spec_list_mobile = array();       // 各规格商品地址，js使用        $spec_image = array();      // 各规格商品主图，规格颜色图片使用        foreach ($spec_array as $key => $value) {            $s_array = unserialize($value['goods_spec']);            $tmp_array = array();            if (!empty($s_array) && is_array($s_array)) {                foreach ($s_array as $k => $v) {                    $tmp_array[] = $k;                }            }            sort($tmp_array);            $spec_sign = implode('|', $tmp_array);            $tpl_spec = array();            $tpl_spec['sign'] = $spec_sign;            $tpl_spec['url'] = urlShop('goods', 'index', array('goods_id' => $value['goods_id']));            $spec_list[] = $tpl_spec;            $spec_list_mobile[$spec_sign] = $value['goods_id'];            $spec_image[$value['color_id']] = thumb($value, 60);        }        $spec_list = json_encode($spec_list);        // 商品多图        $image_more = $this->getGoodsImageByKey($goods_info['goods_commonid'] . '|' . $goods_info['color_id']);        $goods_image = array();        $goods_image_mobile = array();        if (!empty($image_more)) {            foreach ($image_more as $val) {                $goods_image[] = "{ title : '', levelA : '".cthumb($val['goods_image'], 60, $goods_info['store_id'])."', levelB : '".cthumb($val['goods_image'], 360, $goods_info['store_id'])."', levelC : '".cthumb($val['goods_image'], 360, $goods_info['store_id'])."', levelD : '".cthumb($val['goods_image'], 1280, $goods_info['store_id'])."'}";                $goods_image_mobile[] = cthumb($val['goods_image'], 360, $goods_info['store_id']);            }        } else {            $goods_image[] = "{ title : '', levelA : '".thumb($goods_info, 60)."', levelB : '".thumb($goods_info, 360)."', levelC : '".thumb($goods_info, 360)."', levelD : '".thumb($goods_info, 1280)."'}";            $goods_image_mobile[] = thumb($goods_info, 360);        }/*        //抢购        if (!empty($goods_info['groupbuy_info'])) {            $goods_info['promotion_type'] = 'groupbuy';            $goods_info['title'] = '抢购';            $goods_info['remark'] = $goods_info['groupbuy_info']['remark'];            $goods_info['promotion_price'] = $goods_info['groupbuy_info']['groupbuy_price'];            $goods_info['down_price'] = ncPriceFormat($goods_info['goods_price'] - $goods_info['groupbuy_info']['groupbuy_price']);            $goods_info['upper_limit'] = $goods_info['groupbuy_info']['upper_limit'];            unset($goods_info['groupbuy_info']);        }        //限时折扣        if (!empty($goods_info['xianshi_info'])) {            $goods_info['promotion_type'] = 'xianshi';            $goods_info['title'] = $goods_info['xianshi_info']['xianshi_title'];            $goods_info['remark'] = $goods_info['xianshi_info']['xianshi_title'];            $goods_info['promotion_price'] = $goods_info['xianshi_info']['xianshi_price'];            $goods_info['down_price'] = ncPriceFormat($goods_info['goods_price'] - $goods_info['xianshi_info']['xianshi_price']);            $goods_info['lower_limit'] = $goods_info['xianshi_info']['lower_limit'];            $goods_info['explain'] = $goods_info['xianshi_info']['xianshi_explain'];            unset($goods_info['xianshi_info']);        }        // 验证是否允许送赠品        if ($this->checkGoodsIfAllowGift($goods_info)) {            $gift_array = Model('goods_gift')->getGoodsGiftListByGoodsId($goods_id);            if (!empty($gift_array)) {                $goods_info['have_gift'] = 'gift';            }        }*/        // 加入购物车按钮        $goods_info['cart'] = true;        //虚拟、F码、预售不显示加入购物车        if ($goods_info['is_virtual'] == 1 || $goods_info['is_fcode'] == 1 || $goods_info['is_presell'] == 1) {            $goods_info['cart'] = false;        }        // 立即购买文字显示        $goods_info['buynow_text'] = '立即购买';        if ($goods_info['is_presell'] == 1) {            $goods_info['buynow_text'] = '预售购买';        } elseif ($goods_info['is_fcode'] == 1) {            $goods_info['buynow_text'] = 'F码购买';        }        //满即送        //$mansong_info = ($goods_info['is_virtual'] == 1) ? array() : Model('p_mansong')->getMansongInfoByStoreID($goods_info['store_id']);        // 商品受关注次数加1        $goods_info['goods_click'] = intval($goods_info['goods_click']) + 1;        if (C('cache_open')) {            $this->_wGoodsCache($goods_id, array('goods_click' => $goods_info['goods_click']));            wcache('updateRedisDate', array($goods_id => $goods_info['goods_click']), 'goodsClick');        } else {            $this->editGoodsById(array('goods_click' => array('exp', 'goods_click + 1')), $goods_id);        }        $result = array();        $result['goods_info'] = $goods_info;        $result['spec_list'] = $spec_list;        $result['spec_list_mobile'] = $spec_list_mobile;        $result['spec_image'] = $spec_image;        $result['goods_image'] = $goods_image;        $result['goods_image_mobile'] = $goods_image_mobile;        $result['mansong_info'] = $mansong_info;        $result['gift_array'] = $gift_array;        return $result;    }}