<?php/** * 0元淘商品管理 * * **/defined('InSystem') or exit('Access Invalid!');class zero_goodsControl extends SystemControl{	public function __construct(){		parent::__construct();	}	/**	 * 商品列表	 */	public function indexOp(){            $model_zero_goods = Model('zero_goods');            /**             * 检索条件             */            $condition = array();            if (!empty($_GET['goods_name'])){                $condition['goods_name'] = array('like',"%".$_GET['goods_name']."%");            }            if (is_numeric($_GET['goods_state'])){                $condition['goods_state'] = array('eq',$_GET['goods_state']);            }                        if (is_numeric($_GET['goods_verify'])){                $condition['goods_verify'] = array('eq',$_GET['goods_verify']);            }                        if (is_numeric($_GET['goods_commend'])){                $condition['goods_commend'] = array('eq',$_GET['goods_commend']);            }                      $list = $model_zero_goods->getGoodsList($condition, "*", 10);//            dump($list);            Tpl::output('page',$model_zero_goods->showpage());            Tpl::output('list',$list);            Tpl::output('goods_name',trim($_GET['goods_name']));            Tpl::output('goods_state',trim($_GET['goods_state']));            Tpl::output('goods_verify',trim($_GET['goods_verify']));            Tpl::output('goods_commend',trim($_GET['goods_commend']));            Tpl::showpage('zero_goods.index');	}	/**	 * 增加商品	 */	public function goods_addOp(){            		if (chksubmit()){                                               $model_zero_goods = Model('zero_goods');			$obj_validate = new Validate();			$obj_validate->validateparam = array(                            array("input"=>$_POST["goods_name"], "require"=>"true", "message"=>'商品名称不能为空!'),                            array("input"=>$_POST["goods_price"], "require"=>"true", "message"=>'商品市场价不能为空'),                            array("input"=>$_POST["goods_price"], "require"=>"true", 'validator'=>'Number', "message"=>'商品运费只能为数字'),                            array("input"=>$_POST["goods_freight"], "require"=>"true","message"=>'商品运费不能为空'),                            array("input"=>$_POST["goods_freight"], "require"=>"true", 'validator'=>'Number', "message"=>'商品运费只能为数字'),                            array("input"=>$_POST["goods_storage"], "require"=>"true","message"=>'商品库存不能为空'),                            array("input"=>$_POST["goods_storage"], "require"=>"true", 'validator'=>'Number', "message"=>'商品库存只能为数字'),                            array("input"=>$_POST["goods_storage_alarm"], "require"=>"true","message"=>'商品库存警报值不能为空'),                            array("input"=>$_POST["goods_storage_alarm"], "require"=>"true", 'validator'=>'Number', "message"=>'商品库存警报值只能为数字'),                            array("input"=>$_POST["goods_weight"], "require"=>"true", "message"=>'商品重量不能为空'),                            array("input"=>$_FILES["goods_image_index"], "require"=>"true","message"=>'商品主图不能为空'),                            array("input"=>$_FILES["goods_image_list"], "require"=>"true","message"=>'商品详情轮播图不能为空'),                            array("input"=>$_POST["goods_detail"], "require"=>"true","message"=>'商品详情不能为空'),			);			$error = $obj_validate->validate();                        			if ($error != ''){				showMessage($error);			}else {                           				$insert_array = array();                                                                $upload = new UploadFile();                                $file_dir = ATTACH_ZERO_GOODS.'/'.date('Ymd');                                $upload->set('default_dir',$file_dir);                                //上传主图                                $goods_image_index = '';                                if (!empty($_FILES['goods_image_index']['name'])) {                                                                        $upload->file_name = '';                                    $upload_result = $upload->upfile('goods_image_index');                                    if($upload_result){                                        $goods_image_index = $file_dir.'/'.$upload->file_name;                                    }            			}                                                                //上传轮播图                                $goods_image_list = '';                                if (!empty($_FILES['goods_image_list']['name'])) {                                    $goods_image_list_file = $_FILES['goods_image_list'];                                    $file = array();                                        $goods_img_list = array();                                                                                //限制最多只能上传五张                                    foreach ($goods_image_list_file['name'] as $k=>$v) {                                        if($k <= 4){                                            $file['name'] = $v;                                            $file['type'] = $goods_image_list_file['type'][$k];                                            $file['tmp_name'] = $goods_image_list_file['tmp_name'][$k];                                            $file['error'] = $goods_image_list_file['error'][$k];                                            $file['size'] = $goods_image_list_file['size'][$k];                                                                                        $upload->file_name = '';                                            $upload_result = $upload->upfileArray($file);                                            if($upload_result){                                                $goods_img_list[] = $file_dir.'/'.$upload->file_name;                                            }                                        }                                    }                                                                        if(!empty($goods_img_list)){                                        $goods_image_list = implode(';', $goods_img_list);                                    }                                                			}                                				$insert_array['goods_name'] = trim($_POST['goods_name']);				$insert_array['goods_image_index'] = $goods_image_index;				$insert_array['goods_image_list']	= $goods_image_list;				$insert_array['goods_price'] = trim($_POST['goods_price']);				$insert_array['goods_freight'] = trim($_POST['goods_freight']);				$insert_array['goods_storage'] = trim($_POST['goods_storage']);				$insert_array['goods_storage_alarm'] = intval($_POST['goods_storage_alarm']);                                $insert_array['goods_click'] = intval($_POST['goods_click']);                                $insert_array['goods_salenum'] = intval($_POST['goods_salenum']);                                $insert_array['goods_state'] = intval($_POST['goods_state']);                                $insert_array['goods_verify'] = intval($_POST['goods_verify']);                                $insert_array['goods_commend'] = intval($_POST['goods_commend']);                                $insert_array['goods_weight'] = trim($_POST['goods_weight']);				$insert_array['goods_detail'] = trim($_POST['goods_detail']);                                $insert_array['goods_addtime'] = TIMESTAMP;                                $insert_array['goods_edittime'] = TIMESTAMP;                               				$result = $model_zero_goods->addGoods($insert_array);				if ($result){                                    $url = array(                                        array(                                            'url'=>'index.php?act=zero_goods&op=goods_add',                                            'msg'=>'继续添加商品',                                        ),                                        array(                                            'url'=>'index.php?act=zero_goods&op=index',                                            'msg'=>'返回商品列表',                                        )                                    );                                    $this->log('添加0元淘商品:'.'['.$_POST['goods_name'].']',1);                                    showMessage('保存成功',$url);				}else {                                    showMessage('保存失败');				}			}		}		Tpl::showpage('zero_goods.add');	}	/**	 * 商品编辑	 */	public function goods_editOp(){		$lang	= Language::getLangContent();		$model_brand = Model('brand');		if (chksubmit()){			$obj_validate = new Validate();			$obj_validate->validateparam = array(				array("input"=>$_POST["brand_name"], "require"=>"true", "message"=>$lang['brand_add_name_null']),				array("input"=>$_POST["brand_initial"], "require"=>"true", "message"=>'请填写首字母'),				array("input"=>$_POST["brand_sort"], "require"=>"true", 'validator'=>'Number', "message"=>$lang['brand_add_sort_int']),			);			$error = $obj_validate->validate();			if ($error != ''){				showMessage($error);			}else {			    $brand_info = $model_brand->getBrandInfo(array('brand_id' => intval($_POST['brand_id'])));			    $where = array();				$where['brand_id'] = intval($_POST['brand_id']);				$update_array = array();				$update_array['brand_name'] = trim($_POST['brand_name']);				$update_array['brand_initial'] = strtoupper($_POST['brand_initial']);				$update_array['class_id']	= $_POST['class_id'];				$update_array['brand_class'] = trim($_POST['brand_class']);				if (!empty($_POST['brand_pic'])){					$update_array['brand_pic'] = $_POST['brand_pic'];				}				$update_array['brand_recommend'] = intval($_POST['brand_recommend']);				$update_array['brand_sort'] = intval($_POST['brand_sort']);				$update_array['show_type'] = intval($_POST['show_type'])==1?1:0;				$result = $model_brand->editBrand($where, $update_array);				if ($result){					if (!empty($_POST['brand_pic']) && !empty($brand_info['brand_pic'])){						@unlink(BASE_UPLOAD_PATH.DS.ATTACH_BRAND.DS.$brand_info['brand_pic']);					}					$url = array(						array(							'url'=>'index.php?act=brand&op=brand_edit&brand_id='.intval($_POST['brand_id']),							'msg'=>$lang['brand_edit_again'],						),						array(							'url'=>'index.php?act=brand&op=brand',							'msg'=>$lang['brand_add_back_to_list'],						)					);					$this->log(L('nc_edit,brand_index_brand').'['.$_POST['brand_name'].']',1);					showMessage($lang['nc_common_save_succ'],$url);				}else {					$this->log(L('nc_edit,brand_index_brand').'['.$_POST['brand_name'].']',0);					showMessage($lang['nc_common_save_fail']);				}			}		}		$brand_info = $model_brand->getBrandInfo(array('brand_id' => intval($_GET['brand_id'])));		if (empty($brand_info)){			showMessage($lang['param_error']);		}		Tpl::output('brand_array',$brand_info);		// 一级商品分类		$gc_list = Model('goods_class')->getGoodsClassListByParentId(0);		Tpl::output('gc_list', $gc_list);		Tpl::showpage('brand.edit');	}	/**	 * 删除品牌	 */	public function brand_delOp(){		if (intval($_GET['del_brand_id']) > 0){			Model('brand')->delBrand(array('brand_id' => intval($_GET['del_brand_id'])));			$this->log(L('nc_delete,brand_index_brand').'[ID:'.intval($_GET['del_brand_id']).']',1);			showMessage(L('nc_common_del_succ'),'index.php?act=brand&op=brand');		}else {			$this->log(L('nc_delete,brand_index_brand').'[ID:'.intval($_GET['del_brand_id']).']',0);			showMessage(L('nc_common_del_fail'),'index.php?act=brand&op=brand');		}	}	/**	 * 品牌申请	 */	public function brand_applyOp(){		$lang	= Language::getLangContent();		$model_brand = Model('brand');		/**		 * 对申请品牌进行操作 通过，拒绝		 */		if (chksubmit()){			if (!empty($_POST['del_id'])){				switch ($_POST['type']){					case 'pass':						//更新品牌 申请状态						$brandid_array = array();						foreach ($_POST['del_id'] as $v){							$brandid_array[] = intval($v);						}						$update_array = array();						$update_array['brand_apply'] = 1;						$model_brand->editBrand(array('brand_id' => array('in', $brandid_array)), $update_array);						$this->log(L('brand_apply_pass').'[ID:'.implode(',',$brandid_array).']',null);						showMessage($lang['brand_apply_passed']);						break;					case 'refuse':						//删除该品牌						$brandid_array = array();						foreach ($_POST['del_id'] as $v){							$brandid_array[] = intval($v);						}                        $model_brand->delBrand(array('brand_id' => array('in', $brandid_array)));						$this->log(L('nc_delete,brand_index_brand').'[ID:'.implode(',',$_POST['del_id']).']',1);						showMessage($lang['nc_common_del_succ']);						break;						default:							showMessage($lang['brand_apply_invalid_argument']);				}			}else {				$this->log(L('nc_delete,brand_index_brand'),0);				showMessage($lang['nc_common_del_fail']);			}		}		/**		 * 检索条件		 */		$condition = array();		if (!empty($_POST['search_brand_name'])) {            $condition['brand_name'] = array('like', '%' . trim($_POST['search_brand_name']) . '%');		}		if (!empty($_POST['search_brand_class'])) {		    $condition['brand_class'] = array('like', '%' . trim($_POST['search_brand_class']) . '%');		}		$brand_list = $model_brand->getBrandNoPassedList($condition, '*', 10);		Tpl::output('brand_list',$brand_list);		Tpl::output('show_page', $model_brand->showpage());		Tpl::output('search_brand_name',trim($_POST['search_brand_name']));		Tpl::output('search_brand_class',trim($_POST['search_brand_class']));		Tpl::showpage('brand.apply');	}	/**	 * 审核 申请品牌操作	 */	public function brand_apply_setOp(){		$model_brand = Model('brand');		if (intval($_GET['brand_id']) > 0){			switch ($_GET['state']){				case 'pass':					/**					 * 更新品牌 申请状态					 */					$update_array = array();					$update_array['brand_apply'] = 1;					$result = $model_brand->editBrand(array('brand_id' => intval($_GET['brand_id'])), $update_array);					if ($result === true){						$this->log(L('brand_apply_pass').'[ID:'.intval($_GET['brand_id']).']',null);						showMessage(Language::get('brand_apply_pass'));					}else {						$this->log(L('brand_apply_pass').'[ID:'.intval($_GET['brand_id']).']',0);						showMessage(Language::get('brand_apply_fail'));					}					break;				case 'refuse':					// 删除					$model_brand->delBrand(array('brand_id' => intval($_GET['brand_id'])));					$this->log(L('nc_delete,brand_index_brand').'[ID:'.intval($_GET['brand_id']).']',1);					showMessage(Language::get('nc_common_del_succ'));					break;					default:						showMessage(Language::get('brand_apply_paramerror'));			}		}else {			$this->log(L('nc_delete,brand_index_brand').'[ID:'.intval($_GET['brand_id']).']',0);			showMessage(Language::get('brand_apply_brandparamerror'));		}	}	/**	 * ajax操作	 */	public function ajaxOp(){		$model_zero_goods = Model('zero_goods');		switch ($_GET['branch']){			/**			 * 品牌名称			 */			case 'check_goods_name':				/**				 * 判断是否有重复				 */				$condition['goods_name'] = trim($_GET['goods_name']);				$result = $model_zero_goods->getGoodsCount($condition);				if (empty($result)){                                    					echo 'true';exit;				}else {					echo 'false';exit;				}				break;			/**			 * 品牌类别，品牌排序，推荐			 */			case 'brand_class':			case 'brand_sort':			case 'brand_recommend':				$model_brand->editBrand(array('brand_id' => intval($_GET['id'])), array($_GET['column'] => trim($_GET['value'])));				$detail_log = str_replace(array('brand_class','brand_sort','brand_recommend'),array(L('brand_index_class'),L('nc_sort'),L('nc_recommend')),$_GET['branch']);				$this->log(L('nc_edit,brand_index_brand').$detail_log.'[ID:'.intval($_GET['id']).']',1);				echo 'true';exit;				break;			/**			 * 验证品牌名称是否有重复			 */			case 'check_brand_name':				$condition['brand_name'] = trim($_GET['brand_name']);				$condition['brand_id'] = array('neq', intval($_GET['id']));				$result = $model_brand->getBrandList($condition);				if (empty($result)){					echo 'true';exit;				}else {					echo 'false';exit;				}				break;		}	}	/**	 * 品牌导出第一步	 */	public function export_step1Op(){		$model_brand = Model('brand');		$condition = array();		if (!empty($_GET['search_brand_name'])){			$condition['brand_name'] = array('like',"%{$_GET['search_brand_name']}%");		}		if (!empty($_GET['search_brand_class'])){			$condition['brand_class'] = array('like',"%{$_GET['search_brand_class']}%");		}		$condition['brand_apply']	= '1';		if (!is_numeric($_GET['curpage'])){			$count = $model_brand->getBrandCount($condition);			$array = array();			if ($count > self::EXPORT_SIZE ){	//显示下载链接				$page = ceil($count/self::EXPORT_SIZE);				for ($i=1;$i<=$page;$i++){					$limit1 = ($i-1)*self::EXPORT_SIZE + 1;					$limit2 = $i*self::EXPORT_SIZE > $count ? $count : $i*self::EXPORT_SIZE;					$array[$i] = $limit1.' ~ '.$limit2 ;				}				Tpl::output('list',$array);				Tpl::output('murl','index.php?act=brand&op=brand');				Tpl::showpage('export.excel');			}else{	//如果数量小，直接下载				$data = $model_brand->getBrandList($condition, '*', 0, 'brand_id desc', self::EXPORT_SIZE);				$this->createExcel($data);			}		}else{	//下载			$limit1 = ($_GET['curpage']-1) * self::EXPORT_SIZE;			$limit2 = self::EXPORT_SIZE;			$data = $model_brand->getBrandList($condition, '*', 0, 'brand_id desc', "{$limit1},{$limit2}");			$this->createExcel($data);		}	}	/**	 * 生成excel	 *	 * @param array $data	 */	private function createExcel($data = array()){		Language::read('export');		import('libraries.excel');		$excel_obj = new Excel();		$excel_data = array();		//设置样式		$excel_obj->setStyle(array('id'=>'s_title','Font'=>array('FontName'=>'宋体','Size'=>'12','Bold'=>'1')));		//header		$excel_data[0][] = array('styleid'=>'s_title','data'=>L('exp_brandid'));		$excel_data[0][] = array('styleid'=>'s_title','data'=>L('exp_brand'));		$excel_data[0][] = array('styleid'=>'s_title','data'=>L('exp_brand_cate'));		$excel_data[0][] = array('styleid'=>'s_title','data'=>L('exp_brand_img'));		foreach ((array)$data as $k=>$v){			$tmp = array();			$tmp[] = array('data'=>$v['brand_id']);			$tmp[] = array('data'=>$v['brand_name']);			$tmp[] = array('data'=>$v['brand_class']);			$tmp[] = array('data'=>$v['brand_pic']);			$excel_data[] = $tmp;		}		$excel_data = $excel_obj->charset($excel_data,CHARSET);		$excel_obj->addArray($excel_data);		$excel_obj->addWorksheet($excel_obj->charset(L('exp_brand'),CHARSET));		$excel_obj->generateXML($excel_obj->charset(L('exp_brand'),CHARSET).$_GET['curpage'].'-'.date('Y-m-d-H',time()));	}}